'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

// -------------------------------------------
// Define Default Attributes for Components
// -------------------------------------------
module.exports = function needs(ripple) {
  if (!client) return;
  log('creating');
  ripple.render = render(ripple)(ripple.render);
  return ripple;
};

var render = function render(ripple) {
  return function (next) {
    return function (el) {
      var component = lo(el.nodeName);
      if (!(component in ripple.resources)) return;

      var headers = ripple.resources[component].headers,
          attrs = headers.attrs = headers.attrs || parse(headers.needs, component);

      return attrs.map(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2);

        var name = _ref2[0];
        var values = _ref2[1];
        return values.some(function (v, i) {
          var from = attr(el, name) || '';
          return includes(v)(from) ? false : attr(el, name, (from + ' ' + v).trim());
        });
      }).some(Boolean) ? el.draw() : next(el);
    };
  };
};

var parse = function parse() {
  var attrs = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
  var component = arguments[1];
  return attrs.split('[').slice(1).map(replace(']', '')).map(split('=')).map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2);

    var k = _ref4[0];
    var v = _ref4[1];
    return v ? [k, v.split(' ')] : k == 'css' ? [k, [component + '.css']] : [k, []];
  });
};

var log = require('utilise/log')('[ri/needs]'),
    err = require('utilise/err')('[ri/needs]'),
    includes = require('utilise/includes'),
    replace = require('utilise/replace'),
    client = require('utilise/client'),
    split = require('utilise/split'),
    attr = require('utilise/attr'),
    key = require('utilise/key'),
    lo = require('utilise/lo');